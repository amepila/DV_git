--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 18.0 cbx_cycloneii 2018:04:24:18:04:18:SJ cbx_lpm_add_sub 2018:04:24:18:04:18:SJ cbx_lpm_compare 2018:04:24:18:04:18:SJ cbx_lpm_decode 2018:04:24:18:04:18:SJ cbx_mgl 2018:04:24:18:08:49:SJ cbx_nadder 2018:04:24:18:04:18:SJ cbx_stratix 2018:04:24:18:04:18:SJ cbx_stratixii 2018:04:24:18:04:18:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode6266w[1..0]	: WIRE;
	w_anode6275w[3..0]	: WIRE;
	w_anode6292w[3..0]	: WIRE;
	w_anode6302w[3..0]	: WIRE;
	w_anode6312w[3..0]	: WIRE;
	w_anode6322w[3..0]	: WIRE;
	w_anode6332w[3..0]	: WIRE;
	w_anode6342w[3..0]	: WIRE;
	w_anode6352w[3..0]	: WIRE;
	w_anode6364w[1..0]	: WIRE;
	w_anode6371w[3..0]	: WIRE;
	w_anode6382w[3..0]	: WIRE;
	w_anode6392w[3..0]	: WIRE;
	w_anode6402w[3..0]	: WIRE;
	w_anode6412w[3..0]	: WIRE;
	w_anode6422w[3..0]	: WIRE;
	w_anode6432w[3..0]	: WIRE;
	w_anode6442w[3..0]	: WIRE;
	w_data6264w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode6442w[3..3], w_anode6432w[3..3], w_anode6422w[3..3], w_anode6412w[3..3], w_anode6402w[3..3], w_anode6392w[3..3], w_anode6382w[3..3], w_anode6371w[3..3]), ( w_anode6352w[3..3], w_anode6342w[3..3], w_anode6332w[3..3], w_anode6322w[3..3], w_anode6312w[3..3], w_anode6302w[3..3], w_anode6292w[3..3], w_anode6275w[3..3]));
	w_anode6266w[] = ( (w_anode6266w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode6275w[] = ( (w_anode6275w[2..2] & (! w_data6264w[2..2])), (w_anode6275w[1..1] & (! w_data6264w[1..1])), (w_anode6275w[0..0] & (! w_data6264w[0..0])), w_anode6266w[1..1]);
	w_anode6292w[] = ( (w_anode6292w[2..2] & (! w_data6264w[2..2])), (w_anode6292w[1..1] & (! w_data6264w[1..1])), (w_anode6292w[0..0] & w_data6264w[0..0]), w_anode6266w[1..1]);
	w_anode6302w[] = ( (w_anode6302w[2..2] & (! w_data6264w[2..2])), (w_anode6302w[1..1] & w_data6264w[1..1]), (w_anode6302w[0..0] & (! w_data6264w[0..0])), w_anode6266w[1..1]);
	w_anode6312w[] = ( (w_anode6312w[2..2] & (! w_data6264w[2..2])), (w_anode6312w[1..1] & w_data6264w[1..1]), (w_anode6312w[0..0] & w_data6264w[0..0]), w_anode6266w[1..1]);
	w_anode6322w[] = ( (w_anode6322w[2..2] & w_data6264w[2..2]), (w_anode6322w[1..1] & (! w_data6264w[1..1])), (w_anode6322w[0..0] & (! w_data6264w[0..0])), w_anode6266w[1..1]);
	w_anode6332w[] = ( (w_anode6332w[2..2] & w_data6264w[2..2]), (w_anode6332w[1..1] & (! w_data6264w[1..1])), (w_anode6332w[0..0] & w_data6264w[0..0]), w_anode6266w[1..1]);
	w_anode6342w[] = ( (w_anode6342w[2..2] & w_data6264w[2..2]), (w_anode6342w[1..1] & w_data6264w[1..1]), (w_anode6342w[0..0] & (! w_data6264w[0..0])), w_anode6266w[1..1]);
	w_anode6352w[] = ( (w_anode6352w[2..2] & w_data6264w[2..2]), (w_anode6352w[1..1] & w_data6264w[1..1]), (w_anode6352w[0..0] & w_data6264w[0..0]), w_anode6266w[1..1]);
	w_anode6364w[] = ( (w_anode6364w[0..0] & data_wire[3..3]), enable_wire);
	w_anode6371w[] = ( (w_anode6371w[2..2] & (! w_data6264w[2..2])), (w_anode6371w[1..1] & (! w_data6264w[1..1])), (w_anode6371w[0..0] & (! w_data6264w[0..0])), w_anode6364w[1..1]);
	w_anode6382w[] = ( (w_anode6382w[2..2] & (! w_data6264w[2..2])), (w_anode6382w[1..1] & (! w_data6264w[1..1])), (w_anode6382w[0..0] & w_data6264w[0..0]), w_anode6364w[1..1]);
	w_anode6392w[] = ( (w_anode6392w[2..2] & (! w_data6264w[2..2])), (w_anode6392w[1..1] & w_data6264w[1..1]), (w_anode6392w[0..0] & (! w_data6264w[0..0])), w_anode6364w[1..1]);
	w_anode6402w[] = ( (w_anode6402w[2..2] & (! w_data6264w[2..2])), (w_anode6402w[1..1] & w_data6264w[1..1]), (w_anode6402w[0..0] & w_data6264w[0..0]), w_anode6364w[1..1]);
	w_anode6412w[] = ( (w_anode6412w[2..2] & w_data6264w[2..2]), (w_anode6412w[1..1] & (! w_data6264w[1..1])), (w_anode6412w[0..0] & (! w_data6264w[0..0])), w_anode6364w[1..1]);
	w_anode6422w[] = ( (w_anode6422w[2..2] & w_data6264w[2..2]), (w_anode6422w[1..1] & (! w_data6264w[1..1])), (w_anode6422w[0..0] & w_data6264w[0..0]), w_anode6364w[1..1]);
	w_anode6432w[] = ( (w_anode6432w[2..2] & w_data6264w[2..2]), (w_anode6432w[1..1] & w_data6264w[1..1]), (w_anode6432w[0..0] & (! w_data6264w[0..0])), w_anode6364w[1..1]);
	w_anode6442w[] = ( (w_anode6442w[2..2] & w_data6264w[2..2]), (w_anode6442w[1..1] & w_data6264w[1..1]), (w_anode6442w[0..0] & w_data6264w[0..0]), w_anode6364w[1..1]);
	w_data6264w[2..0] = data_wire[2..0];
END;
--VALID FILE
